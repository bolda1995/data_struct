#include <locale>
#include <stdlib.h>
#include <iostream>
#include <malloc.h>
#include <time.h>
using namespace std;


struct Upakovka
{
    int* AN;// элементы
    int* NR;// номер (из массива AN) следующего ненулевого элемента, расположенного в матрице по строке
    int* NC;// номер (из массива AN) следующего ненулевого элемента, расположенного в матрице по столбцу
    int* JR;// указатель входа для строк, расположенные в соответствии с порядком строк 
    int* JC;// указатель входа для столбцов, расположенные в соответствии с порядком столбцов 
};


int main()
{
    setlocale(LC_ALL, "Russian");

    int B[5][4] = { 0,10,0,0,60,0,30,0,20,60,0,90,0,0,0,0,0,70,0,280 };
    int C[5][4] = { 0,300,100,400,0,300,0,0,0,0,0,0,500,0,0,0,0,-70,500,0 };
    int D[4][5] = { 0,0,0,500,0,100,200,0,0,-60,300,0,0,0,200,300,0,0,0,0 };
    int S[5][4] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
    int U[5][5] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
    int i, j, k, l, m, kol, kolB, kolC, kolD, kB, kC, kD, mB, mC, mD, z, xB, yB, xC, yC, y;
    bool flag = false;
    bool perenos = false;


    cout << "Начальная матрица:";
    for (i = 0; i < 5; i++)
    {
        cout << endl;
        for (j = 0; j < 4; j++)
        {
            printf("%5d ", B[i][j]);
        }
    }
    kolB = 0;
    for (i = 0; i < 5; i++)
    {
        for (j = 0; j < 4; j++)
        {
            if (B[i][j] != 0)
                kolB++;
        }
    }
    Upakovka Bm;
    Bm.AN = (int*)malloc(sizeof(int) * kolB);
    Bm.NR = (int*)malloc(sizeof(int) * kolB);
    Bm.NC = (int*)malloc(sizeof(int) * kolB);
    Bm.JR = (int*)malloc(sizeof(int) * 5);
    Bm.JC = (int*)malloc(sizeof(int) * 4);
    for (i = 0; i < kolB; i++)
    {
        Bm.NR[i] = -1;
    }
    for (i = 0; i < kolB; i++)
    {
        Bm.NC[i] = -1;
    }
    for (i = 0; i < 5; i++)
    {
        Bm.JR[i] = -1;
    }
    for (i = 0; i < 4; i++)
    {
        Bm.JC[i] = -1;
    }

    k = 0;
    for (i = 0; i < 5; i++)
    {
        for (j = 0; j < 4; j++)
        {
            if (B[i][j] != 0)
            {
                Bm.AN[k] = B[i][j];
                if (Bm.JR[i] < 0)
                {
                    Bm.JR[i] = k;
                }
                else
                {
                    Bm.NR[k - 1] = k;
                }
                if (Bm.JC[j] < 0)
                {
                    Bm.JC[j] = k;
                }
                else
                {
                    m = Bm.JC[j];
                    while (Bm.NC[m] != -1)
                    {
                        m = Bm.NC[m];
                    }
                    Bm.NC[m] = k;
                }
                k++;
            }
        }
    }
    for (i = 0; i < 5; i++)
    {
        if (Bm.JR[i] > -1)
        {
            m = Bm.JR[i];
            while (Bm.NR[m] != -1)
            {
                m = Bm.NR[m];
            }
            Bm.NR[m] = Bm.JR[i];
        }
    }
    for (i = 0; i < 4; i++)
    {
        if (Bm.JC[i] > -1)
        {
            m = Bm.JC[i];
            while (Bm.NC[m] != -1)
            {
                m = Bm.NC[m];
            }
            Bm.NC[m] = Bm.JC[i];
        }
    }

    cout << endl << endl << "Bm.AN:";
    for (i = 0; i < kolB; i++)
    {
        printf("%5d ", Bm.AN[i]);
    }
    cout << endl << "Bm.NR:";
    for (i = 0; i < kolB; i++)
    {
        printf("%5d ", Bm.NR[i]);
    }
    cout << endl << "Bm.NC:";
    for (i = 0; i < kolB; i++)
    {
        printf("%5d ", Bm.NC[i]);
    }
    cout << endl << "Bm.JR:";
    for (i = 0; i < 5; i++)
    {
        printf("%5d ", Bm.JR[i]);
    }
    cout << endl << "Bm.JC:";
    for (i = 0; i < 4; i++)
    {
        printf("%5d ", Bm.JC[i]);
    }


    cout << endl << endl << endl << "Матрица для сложения:";
    for (i = 0; i < 5; i++)
    {
        cout << endl;
        for (j = 0; j < 4; j++)
        {
            printf("%5d ", C[i][j]);
        }
    }
    kolC = 0;
    for (i = 0; i < 5; i++)
    {
        for (j = 0; j < 4; j++)
        {
            if (C[i][j] != 0)
                kolC++;
        }
    }
    Upakovka Cm;
    Cm.AN = (int*)malloc(sizeof(int) * kolC);
    Cm.NR = (int*)malloc(sizeof(int) * kolC);
    Cm.NC = (int*)malloc(sizeof(int) * kolC);
    Cm.JR = (int*)malloc(sizeof(int) * 5);
    Cm.JC = (int*)malloc(sizeof(int) * 4);
    for (i = 0; i < kolC; i++)
    {
        Cm.NR[i] = -1;
    }
    for (i = 0; i < kolC; i++)
    {
        Cm.NC[i] = -1;
    }
    for (i = 0; i < 5; i++)
    {
        Cm.JR[i] = -1;
    }
    for (i = 0; i < 4; i++)
    {
        Cm.JC[i] = -1;
    }

    k = 0;
    for (i = 0; i < 5; i++)
    {
        for (j = 0; j < 4; j++)
        {
            if (C[i][j] != 0)
            {
                Cm.AN[k] = C[i][j];
                if (Cm.JR[i] < 0)
                {
                    Cm.JR[i] = k;
                }
                else
                {
                    Cm.NR[k - 1] = k;
                }
                if (Cm.JC[j] < 0)
                {
                    Cm.JC[j] = k;
                }
                else
                {
                    m = Cm.JC[j];
                    while (Cm.NC[m] != -1)
                    {
                        m = Cm.NC[m];
                    }
                    Cm.NC[m] = k;
                }
                k++;
            }
        }
    }
    for (i = 0; i < 5; i++)
    {
        if (Cm.JR[i] > -1)
        {
            m = Cm.JR[i];
            while (Cm.NR[m] != -1)
            {
                m = Cm.NR[m];
            }
            Cm.NR[m] = Cm.JR[i];
        }
    }
    for (i = 0; i < 4; i++)
    {
        if (Cm.JC[i] > -1)
        {
            m = Cm.JC[i];
            while (Cm.NC[m] != -1)
            {
                m = Cm.NC[m];
            }
            Cm.NC[m] = Cm.JC[i];
        }
    }
    cout << endl << endl << "Cm.AN:";
    for (i = 0; i < kolC; i++)
    {
        printf("%5d ", Cm.AN[i]);
    }
    cout << endl << "Cm.NR:";
    for (i = 0; i < kolC; i++)
    {
        printf("%5d ", Cm.NR[i]);
    }
    cout << endl << "Cm.NC:";
    for (i = 0; i < kolC; i++)
    {
        printf("%5d ", Cm.NC[i]);
    }
    cout << endl << "Cm.JR:";
    for (i = 0; i < 5; i++)
    {
        printf("%5d ", Cm.JR[i]);
    }
    cout << endl << "Cm.JC:";
    for (i = 0; i < 4; i++)
    {
        printf("%5d ", Cm.JC[i]);
    }


    cout << endl << endl << endl << "Матрица для умножения:";
    for (i = 0; i < 4; i++)
    {
        cout << endl;
        for (j = 0; j < 5; j++)
        {
            printf("%5d ", D[i][j]);
        }
    }
    kolD = 0;
    for (i = 0; i < 4; i++)
    {
        for (j = 0; j < 5; j++)
        {
            if (D[i][j] != 0)
                kolD++;
        }
    }

    Upakovka Dm;
    Dm.AN = (int*)malloc(sizeof(int) * kolD);
    Dm.NR = (int*)malloc(sizeof(int) * kolD);
    Dm.NC = (int*)malloc(sizeof(int) * kolD);
    Dm.JR = (int*)malloc(sizeof(int) * 4);
    Dm.JC = (int*)malloc(sizeof(int) * 5);
    for (i = 0; i < kolD; i++)
    {
        Dm.NR[i] = -1;
    }
    for (i = 0; i < kolD; i++)
    {
        Dm.NC[i] = -1;
    }
    for (i = 0; i < 4; i++)
    {
        Dm.JR[i] = -1;
    }
    for (i = 0; i < 5; i++)
    {
        Dm.JC[i] = -1;
    }

    k = 0;
    for (i = 0; i < 4; i++)
    {
        for (j = 0; j < 5; j++)
        {
            if (D[i][j] != 0)
            {
                Dm.AN[k] = D[i][j];
                if (Dm.JR[i] < 0)
                {
                    Dm.JR[i] = k;
                }
                else
                {
                    Dm.NR[k - 1] = k;
                }
                if (Dm.JC[j] < 0)
                {
                    Dm.JC[j] = k;
                }
                else
                {
                    m = Dm.JC[j];
                    while (Dm.NC[m] != -1)
                    {
                        m = Dm.NC[m];
                    }
                    Dm.NC[m] = k;
                }
                k++;
            }
        }
    }
    for (i = 0; i < 4; i++)
    {
        if (Dm.JR[i] > -1)
        {
            m = Dm.JR[i];
            while (Dm.NR[m] != -1)
            {
                m = Dm.NR[m];
            }
            Dm.NR[m] = Dm.JR[i];
        }
    }
    for (i = 0; i < 5; i++)
    {
        if (Dm.JC[i] > -1)
        {
            m = Dm.JC[i];
            while (Dm.NC[m] != -1)
            {
                m = Dm.NC[m];
            }
            Dm.NC[m] = Dm.JC[i];
        }
    }

    cout << endl << endl << "Dm.AN:";
    for (i = 0; i < kolD; i++)
    {
        printf("%5d ", Dm.AN[i]);
    }
    cout << endl << "Dm.NR:";
    for (i = 0; i < kolD; i++)
    {
        printf("%5d ", Dm.NR[i]);
    }
    cout << endl << "Dm.NC:";
    for (i = 0; i < kolD; i++)
    {
        printf("%5d ", Dm.NC[i]);
    }
    cout << endl << "Dm.JR:";
    for (i = 0; i < 4; i++)
    {
        printf("%5d ", Dm.JR[i]);
    }
    cout << endl << "Dm.JC:";
    for (i = 0; i < 5; i++)
    {
        printf("%5d ", Dm.JC[i]);
    }

    Upakovka Sm;
    Sm.AN = (int*)malloc(sizeof(int) * 20);
    Sm.NR = (int*)malloc(sizeof(int) * 20);
    Sm.NC = (int*)malloc(sizeof(int) * 20);
    Sm.JR = (int*)malloc(sizeof(int) * 5);
    Sm.JC = (int*)malloc(sizeof(int) * 4);

    for (i = 0; i < 20; i++)
    {
        Sm.AN[i] = -1;
    }
    for (i = 0; i < 20; i++)
    {
        Sm.NR[i] = -1;
    }
    for (i = 0; i < 20; i++)
    {
        Sm.NC[i] = -1;
    }
    for (i = 0; i < 5; i++)
    {
        Sm.JR[i] = -1;
    }
    for (i = 0; i < 4; i++)
    {
        Sm.JC[i] = -1;
    }

    kB = 0;
    kC = 0;
    k = 0;
    for (i = 0; i < 5;)
    {
        perenos = false;
        if (Bm.JR[i] != -1)
        {
            mB = Bm.JR[i];
            while (Bm.NR[mB] != Bm.JR[i])
            {
                if (Bm.NR[mB] == kB)
                    break;
                mB = Bm.NR[mB];
            }
        }
        if (Cm.JR[i] != -1)
        {
            mC = Cm.JR[i];
            while (Cm.NR[mC] != Cm.JR[i])
            {
                if (Cm.NR[mC] == kC)
                    break;
                mC = Cm.NR[mC];
            }
        }
        if (Bm.JR[i] != -1 && Cm.JR[i] != -1)
        {
            if (Bm.NR[mB] == kB && Cm.NR[mC] == kC)
            {
                for (j = 0; j < 4;)
                {
                    if (Bm.JC[j] != -1)
                    {
                        mB = Bm.JC[j];
                        while (Bm.NC[mB] != Bm.JC[j])
                        {
                            if (Bm.NC[mB] == kB)
                                break;
                            mB = Bm.NC[mB];
                        }
                    }
                    if (Cm.JC[j] != -1)
                    {
                        mC = Cm.JC[j];
                        while (Cm.NC[mC] != Cm.JC[j])
                        {
                            if (Cm.NC[mC] == kC)
                                break;
                            mC = Cm.NC[mC];
                        }
                    }
                    if (Bm.NC[mB] == kB && Cm.NC[mC] == kC)
                    {
                        if (Bm.AN[kB] + Cm.AN[kC] != 0)
                        {
                            Sm.AN[k] = Bm.AN[kB] + Cm.AN[kC];
                            if (Sm.JR[i] < 0)
                            {
                                Sm.JR[i] = k;
                            }
                            else
                            {
                                Sm.NR[k - 1] = k;
                            }
                            if (Sm.JC[j] < 0)
                            {
                                Sm.JC[j] = k;
                            }
                            else
                            {
                                m = Sm.JC[j];
                                while (Sm.NC[m] != -1)
                                {
                                    m = Sm.NC[m];
                                }
                                Sm.NC[m] = k;
                            }
                            k++;
                        }
                        kB++;
                        kC++;
                        j = 0;
                    }
                    else
                        j++;
                }
            }
        }
        while (perenos == false)
        {
            if (kB == Bm.JR[i + 1] && kC == Cm.JR[i + 1] || Bm.JR[i + 1] == -1 && Cm.JR[i + 1] == -1)
            {
                i++;
                perenos = true;
                break;
            }
            else
            {
                if (kB == kolB && kC == kolC)
                {
                    i++;
                    perenos = true;
                    break;
                }
                if (Bm.JR[i + 1] == -1 && kC == Cm.JR[i + 1] || kB == Bm.JR[i + 1] && Cm.JR[i + 1] == -1)
                {
                    z = i + 1;
                    if (Bm.JR[z] == -1)
                    {
                        for (z; z < 5; z++)
                            if (Bm.JR[z] != -1)
                                break;
                    }
                    l = i + 1;
                    if (Cm.JR[l] == -1)
                    {
                        for (l; l < 5; l++)
                            if (Cm.JR[l] != -1)
                                break;
                    }
                    if (kB == Bm.JR[z] && kC == Cm.JR[l])
                    {
                        i++;
                        perenos = true;
                        break;
                    }
                }
                yB = -1;
                yC = -1;
                if (kB != Bm.JR[i + 1] && kB < kolB)
                {
                    z = i + 1;
                    if (Bm.JR[z] == -1)
                    {
                        for (z; z < 5; z++)
                            if (Bm.JR[z] != -1)
                                break;
                    }
                    if (kB != Bm.JR[z] && Bm.JR[i] != -1)
                    {
                        xB = Bm.NC[kB];
                        while (xB != kB)
                        {
                            xB = Bm.NC[xB];
                        }
                        for (j = 0; j < 4; j++)
                        {
                            if (xB == Bm.JC[j])
                            {
                                yB = j;
                                break;
                            }
                            m = Bm.JC[j];
                            if (Bm.NC[m] == xB)
                            {
                                yB = j;
                                break;
                            }
                            while (Bm.NC[m] != Bm.JC[j])
                            {
                                if (m == xB)
                                {
                                    yB = j;
                                    break;
                                }
                                m = Bm.NC[m];
                            }
                        }
                    }
                }
                if (kC != Cm.JR[i + 1] && kC < kolC)
                {
                    z = i + 1;
                    if (Cm.JR[z] == -1)
                    {
                        for (z; z < 5; z++)
                            if (Cm.JR[z] != -1)
                                break;
                    }
                    if (kC != Cm.JR[z] && Cm.JR[i] != -1)
                    {
                        xC = Cm.NC[kC];
                        while (xC != kC)
                        {
                            xC = Cm.NC[xC];
                        }
                        for (j = 0; j < 4; j++)
                        {
                            if (xC == Cm.JC[j])
                            {
                                yC = j;
                                break;
                            }
                            m = Cm.JC[j];
                            if (Cm.NC[m] == xC)
                            {
                                yC = j;
                                break;
                            }
                            while (Cm.NC[m] != Cm.JC[j])
                            {
                                if (m == xC)
                                {
                                    yC = j;
                                    break;
                                }
                                m = Cm.NC[m];
                            }
                        }
                    }
                }
                if (yB == -1 || yC < yB && yC != -1)
                {
                    Sm.AN[k] = Cm.AN[kC];
                    if (Sm.JR[i] < 0)
                    {
                        Sm.JR[i] = k;
                    }
                    else
                    {
                        Sm.NR[k - 1] = k;
                    }
                    if (Sm.JC[yC] < 0)
                    {
                        Sm.JC[yC] = k;
                    }
                    else
                    {
                        m = Sm.JC[yC];
                        while (Sm.NC[m] != -1)
                        {
                            m = Sm.NC[m];
                        }
                        Sm.NC[m] = k;
                    }
                    k++;
                    kC++;
                }
                else
                {
                    if (yC == -1 || yB < yC && yB != -1)
                    {
                        Sm.AN[k] = Bm.AN[kB];
                        if (Sm.JR[i] < 0)
                        {
                            Sm.JR[i] = k;
                        }
                        else
                        {
                            Sm.NR[k - 1] = k;
                        }
                        if (Sm.JC[yB] < 0)
                        {
                            Sm.JC[yB] = k;
                        }
                        else
                        {
                            m = Sm.JC[yB];
                            while (Sm.NC[m] != -1)
                            {
                                m = Sm.NC[m];
                            }
                            Sm.NC[m] = k;
                        }
                        k++;
                        kB++;
                    }
                }
            }
        }
    }
    for (i = 0; i < 5; i++)
    {
        if (Sm.JR[i] > -1)
        {
            m = Sm.JR[i];
            while (Sm.NR[m] != -1)
            {
                m = Sm.NR[m];
            }
            Sm.NR[m] = Sm.JR[i];
        }
    }
    for (i = 0; i < 4; i++)
    {
        if (Sm.JC[i] > -1)
        {
            m = Sm.JC[i];
            while (Sm.NC[m] != -1)
            {
                m = Sm.NC[m];
            }
            Sm.NC[m] = Sm.JC[i];
        }
    }

    cout << endl << endl << endl;
    cout << endl << endl << "Sm.AN:";
    for (i = 0; i < 20; i++)
    {
        if (Sm.AN[i] == -1)
        {
            kol = i;
            break;
        }
        printf("%5d ", Sm.AN[i]);
    }
    cout << endl << "Sm.NR:";
    for (i = 0; i < kol; i++)
    {
        printf("%5d ", Sm.NR[i]);
    }
    cout << endl << "Sm.NC:";
    for (i = 0; i < kol; i++)
    {
        printf("%5d ", Sm.NC[i]);
    }
    cout << endl << "Sm.JR:";
    for (i = 0; i < 5; i++)
    {
        printf("%5d ", Sm.JR[i]);
    }
    cout << endl << "Sm.JC:";
    for (i = 0; i < 4; i++)
    {
        printf("%5d ", Sm.JC[i]);
    }
    k = 0;
    for (i = 0; i < 5;)
    {
        if (k < kol)
        {
            if (Sm.JR[i] != -1)
            {
                for (j = 0; j < 4; j++)
                {
                    if (Sm.JC[j] != -1)
                    {
                        if (k == Sm.JC[j])
                        {
                            y = j;
                            break;
                        }
                        m = Sm.JC[j];
                        if (Sm.NC[m] == k)
                        {
                            y = j;
                            break;
                        }
                        while (Sm.NC[m] != Sm.JC[j])
                        {
                            if (Sm.NC[m] == k)
                            {
                                y = j;
                                break;
                            }
                            m = Sm.NC[m];
                        }
                    }
                }
                S[i][y] = Sm.AN[k];
                k++;
                if (Sm.NR[k - 1] == Sm.JR[i])
                    i++;
            }
            else
                i++;
        }
    }
    cout << endl << endl << "Распакованная матрица S:";
    for (i = 0; i < 5; i++)
    {
        cout << endl;
        for (j = 0; j < 4; j++)
        {
            printf("%5d ", S[i][j]);
        }
    }


    Upakovka Um;
    Um.AN = (int*)malloc(sizeof(int) * 20);
    Um.NR = (int*)malloc(sizeof(int) * 20);
    Um.NC = (int*)malloc(sizeof(int) * 20);
    Um.JR = (int*)malloc(sizeof(int) * 5);
    Um.JC = (int*)malloc(sizeof(int) * 5);

    for (i = 0; i < 20; i++)
    {
        Um.AN[i] = 0;
    }
    for (i = 0; i < 20; i++)
    {
        Um.NR[i] = -1;
    }
    for (i = 0; i < 20; i++)
    {
        Um.NC[i] = -1;
    }
    for (i = 0; i < 5; i++)
    {
        Um.JR[i] = -1;
    }
    for (i = 0; i < 4; i++)
    {
        Um.JC[i] = -1;
    }

    k = 0;
    for (i = 0; i < 5;)
    {
        if (Bm.JR[i] == -1)
        {
            i++;
        }
        else
        {
            kB = Bm.JR[i];
            for (j = 0; j < 5;)
            {
                if (Dm.JC[j] == -1)
                {
                    j++;
                    kB = Bm.JR[i];
                }
                else
                {
                    flag = false;
                    kD = Dm.JC[j];
                    for (l = 0; l < 4; l ++)
                    {
                        for (z = 0; z < 4; z++)
                        {
                            if (Bm.JC[z] != -1)
                            {
                                mB = Bm.JC[z];
                                while (Bm.NC[mB] != Bm.JC[z])
                                {
                                    if (Bm.NC[mB] == kB)
                                        break;
                                    mB = Bm.NC[mB];
                                }
                            }
                            if (Dm.JR[z] != -1)
                            {
                                mD = Dm.JR[z];
                                while (Dm.NR[mD] != Dm.JR[z])
                                {
                                    if (Dm.NR[mD] == kD)
                                        break;
                                    mD = Dm.NR[mD];
                                }
                            }
                            if (Bm.NC[mB] == kB && Dm.NR[mD] == kD)
                            {
                                Um.AN[k] += Bm.AN[kB] * Dm.AN[kD];
                                kB++;
                                flag = true;
                                if (Dm.NC[kD] != Dm.JC[j])
                                    kD = Dm.NC[kD];
                                break;
                            }
                        }
                        if (flag == true)
                            break;
                        if (Dm.NC[kD] == Dm.JC[j])
                            break;
                        kD = Dm.NC[kD];
                    }
                    for (y = i + 1; y < 5; y++)
                    {
                        if (Bm.JR[y] != -1)
                            break;
                    }
                    if (kB == Bm.JR[y] || kB > kolB - 1) 
                    {
                        if (Um.AN[k] != 0)
                        {
                            if (Um.JR[i] < 0)
                            {
                                Um.JR[i] = k;
                            }
                            else
                            {
                                Um.NR[k - 1] = k;
                            }
                            if (Um.JC[j] < 0)
                            {
                                Um.JC[j] = k;
                            }
                            else
                            {
                                m = Um.JC[j];
                                while (Um.NC[m] != -1)
                                {
                                    m = Um.NC[m];
                                }
                                Um.NC[m] = k;
                            }
                            k++;
                        }
                        j++;
                        if (j <5)
                            kB = Bm.JR[i];      
                    }
                    else
                    {
                        if (flag == false)
                        {
                            if (Bm.NR[kB] == Bm.JR[i])
                            {
                                if (Um.AN[k] != 0)
                                {
                                    if (Um.JR[i] < 0)
                                    {
                                        Um.JR[i] = k;
                                    }
                                    else
                                    {
                                        Um.NR[k - 1] = k;
                                    }
                                    if (Um.JC[j] < 0)
                                    {
                                        Um.JC[j] = k;
                                    }
                                    else
                                    {
                                        m = Um.JC[j];
                                        while (Um.NC[m] != -1)
                                        {
                                            m = Um.NC[m];
                                        }
                                        Um.NC[m] = k;
                                    }
                                    k++;
                                }
                                j++;
                                if (j < 5)
                                    kB = Bm.JR[i];
                                else
                                    kB = Bm.JR[y];
                            }
                            else
                            {
                                kB++;
                            }
                        }
                    }
                }

            }
            if (kB == Bm.JR[y] && Dm.NC[kD] == Dm.JC[j - 1])
            {
                i++;
                j = 0;
            }
        }
    }


    for (i = 0; i < 5; i++)
    {
        if (Um.JR[i] > -1)
        {
            m = Um.JR[i];
            while (Um.NR[m] != -1)
            {
                m = Um.NR[m];
            }
            Um.NR[m] = Um.JR[i];
        }
    }
    for (i = 0; i < 5; i++)
    {
        if (Um.JC[i] > -1)
        {
            m = Um.JC[i];
            while (Um.NC[m] != -1)
            {
                m = Um.NC[m];
            }
            Um.NC[m] = Um.JC[i];
        }
    }


    cout << endl << endl << endl;
    cout << endl << endl << "Um.AN:";
    for (i = 0; i < 20; i++)
    {
        if (Um.AN[i] == 0)
        {
            kol = i;
            break;
        }
        printf("%5d ", Um.AN[i]);
    }
    cout << endl << "Um.NR:";
    for (i = 0; i < kol; i++)
    {
        printf("%5d ", Um.NR[i]);
    }
    cout << endl << "Um.NC:";
    for (i = 0; i < kol; i++)
    {
        printf("%5d ", Um.NC[i]);
    }
    cout << endl << "Um.JR:";
    for (i = 0; i < 5; i++)
    {
        printf("%5d ", Um.JR[i]);
    }
    cout << endl << "Um.JC:";
    for (i = 0; i < 5; i++)
    {
        printf("%5d ", Um.JC[i]);
    }

    k = 0;
    for (i = 0; i < 5;)
    {
        if (k < kol)
        {
            if (Um.JR[i] != -1)
            {
                for (j = 0; j < 5; j++)
                {
                    if (Um.JC[j] != -1)
                    {
                        if (k == Um.JC[j])
                        {
                            y = j;
                            break;
                        }
                        m = Um.JC[j];
                        if (Um.NC[m] == k)
                        {
                            y = j;
                            break;
                        }
                        while (Um.NC[m] != Um.JC[j])
                        {
                            if (Um.NC[m] == k)
                            {
                                y = j;
                                break;
                            }
                            m = Um.NC[m];
                        }
                    }
                }
                U[i][y] = Um.AN[k];
                k++;
                if (Um.NR[k - 1] == Um.JR[i])
                    i++;
            }
            else
                i++;
        }
    }
    cout << endl << endl << "Распакованная матрица U:";
    for (i = 0; i < 5; i++)
    {
        cout << endl;
        for (j = 0; j < 5; j++)
        {
            printf("%5d ", U[i][j]);
        }
    }

    return 0;
}
